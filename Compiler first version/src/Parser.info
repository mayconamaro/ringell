-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	Prog -> Fun Prog                                   (1)
	Prog -> main ':' Type main '=' Exp                 (2)
	Exp -> var                                         (3)
	Exp -> int                                         (4)
	Exp -> suc Exp                                     (5)
	Exp -> '\\' var Exp                                (6)
	Exp -> Exp '.' Exp                                 (7)
	Exp -> match Exp zero "->" Exp suc var "->" Exp    (8)
	Exp -> '(' Exp ')'                                 (9)
	Type -> nat                                        (10)
	Type -> Type "->" Type                             (11)
	Type -> '(' Type ')'                               (12)
	Fun -> var ':' Type var '=' Exp                    (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'.'            { Dot }
	match          { Match }
	zero           { Zero }
	suc            { Suc }
	'\\'           { Backslash }
	int            { Num $$ }
	'('            { LParen }
	')'            { RParen }
	'='            { Assign }
	':'            { Colon }
	"->"           { Arrow }
	nat            { Nat }
	main           { Main }
	var            { ID $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prog            rules 1, 2
	Exp             rules 3, 4, 5, 6, 7, 8, 9
	Type            rules 10, 11, 12
	Fun             rule  13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Prog                              (rule 0)

	main           shift, and enter state 5
	var            shift, and enter state 3

	Prog           goto state 4
	Fun            goto state 2

State 1

	Prog -> . Fun Prog                                  (rule 1)

	var            shift, and enter state 3

	Fun            goto state 2

State 2

	Prog -> Fun . Prog                                  (rule 1)

	main           shift, and enter state 5
	var            shift, and enter state 3

	Prog           goto state 8
	Fun            goto state 2

State 3

	Fun -> var . ':' Type var '=' Exp                   (rule 13)

	':'            shift, and enter state 7


State 4

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 5

	Prog -> main . ':' Type main '=' Exp                (rule 2)

	':'            shift, and enter state 6


State 6

	Prog -> main ':' . Type main '=' Exp                (rule 2)

	'('            shift, and enter state 10
	nat            shift, and enter state 11

	Type           goto state 12

State 7

	Fun -> var ':' . Type var '=' Exp                   (rule 13)

	'('            shift, and enter state 10
	nat            shift, and enter state 11

	Type           goto state 9

State 8

	Prog -> Fun Prog .                                  (rule 1)

	%eof           reduce using rule 1


State 9

	Type -> Type . "->" Type                            (rule 11)
	Fun -> var ':' Type . var '=' Exp                   (rule 13)

	"->"           shift, and enter state 13
	var            shift, and enter state 16


State 10

	Type -> '(' . Type ')'                              (rule 12)

	'('            shift, and enter state 10
	nat            shift, and enter state 11

	Type           goto state 15

State 11

	Type -> nat .                                       (rule 10)

	')'            reduce using rule 10
	"->"           reduce using rule 10
	main           reduce using rule 10
	var            reduce using rule 10


State 12

	Prog -> main ':' Type . main '=' Exp                (rule 2)
	Type -> Type . "->" Type                            (rule 11)

	"->"           shift, and enter state 13
	main           shift, and enter state 14


State 13

	Type -> Type "->" . Type                            (rule 11)

	'('            shift, and enter state 10
	nat            shift, and enter state 11

	Type           goto state 20

State 14

	Prog -> main ':' Type main . '=' Exp                (rule 2)

	'='            shift, and enter state 19


State 15

	Type -> Type . "->" Type                            (rule 11)
	Type -> '(' Type . ')'                              (rule 12)

	')'            shift, and enter state 18
	"->"           shift, and enter state 13


State 16

	Fun -> var ':' Type var . '=' Exp                   (rule 13)

	'='            shift, and enter state 17


State 17

	Fun -> var ':' Type var '=' . Exp                   (rule 13)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 28

State 18

	Type -> '(' Type ')' .                              (rule 12)

	')'            reduce using rule 12
	"->"           reduce using rule 12
	main           reduce using rule 12
	var            reduce using rule 12


State 19

	Prog -> main ':' Type main '=' . Exp                (rule 2)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 21

State 20

	Type -> Type . "->" Type                            (rule 11)
	Type -> Type "->" Type .                            (rule 11)

	')'            reduce using rule 11
	"->"           shift, and enter state 13
	main           reduce using rule 11
	var            reduce using rule 11


State 21

	Prog -> main ':' Type main '=' Exp .                (rule 2)
	Exp -> Exp . '.' Exp                                (rule 7)

	'.'            shift, and enter state 29
	%eof           reduce using rule 2


State 22

	Exp -> match . Exp zero "->" Exp suc var "->" Exp    (rule 8)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 33

State 23

	Exp -> suc . Exp                                    (rule 5)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 32

State 24

	Exp -> '\\' . var Exp                               (rule 6)

	var            shift, and enter state 31


State 25

	Exp -> int .                                        (rule 4)

	'.'            reduce using rule 4
	zero           reduce using rule 4
	suc            reduce using rule 4
	')'            reduce using rule 4
	main           reduce using rule 4
	var            reduce using rule 4
	%eof           reduce using rule 4


State 26

	Exp -> '(' . Exp ')'                                (rule 9)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 30

State 27

	Exp -> var .                                        (rule 3)

	'.'            reduce using rule 3
	zero           reduce using rule 3
	suc            reduce using rule 3
	')'            reduce using rule 3
	main           reduce using rule 3
	var            reduce using rule 3
	%eof           reduce using rule 3


State 28

	Exp -> Exp . '.' Exp                                (rule 7)
	Fun -> var ':' Type var '=' Exp .                   (rule 13)

	'.'            shift, and enter state 29
	main           reduce using rule 13
	var            reduce using rule 13


State 29

	Exp -> Exp '.' . Exp                                (rule 7)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 37

State 30

	Exp -> Exp . '.' Exp                                (rule 7)
	Exp -> '(' Exp . ')'                                (rule 9)

	'.'            shift, and enter state 29
	')'            shift, and enter state 36


State 31

	Exp -> '\\' var . Exp                               (rule 6)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 35

State 32

	Exp -> suc Exp .                                    (rule 5)
	Exp -> Exp . '.' Exp                                (rule 7)

	'.'            shift, and enter state 29
	zero           reduce using rule 5
	suc            reduce using rule 5
	')'            reduce using rule 5
	main           reduce using rule 5
	var            reduce using rule 5
	%eof           reduce using rule 5


State 33

	Exp -> Exp . '.' Exp                                (rule 7)
	Exp -> match Exp . zero "->" Exp suc var "->" Exp    (rule 8)

	'.'            shift, and enter state 29
	zero           shift, and enter state 34


State 34

	Exp -> match Exp zero . "->" Exp suc var "->" Exp    (rule 8)

	"->"           shift, and enter state 38


State 35

	Exp -> '\\' var Exp .                               (rule 6)
	Exp -> Exp . '.' Exp                                (rule 7)

	'.'            shift, and enter state 29
	zero           reduce using rule 6
	suc            reduce using rule 6
	')'            reduce using rule 6
	main           reduce using rule 6
	var            reduce using rule 6
	%eof           reduce using rule 6


State 36

	Exp -> '(' Exp ')' .                                (rule 9)

	'.'            reduce using rule 9
	zero           reduce using rule 9
	suc            reduce using rule 9
	')'            reduce using rule 9
	main           reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 9


State 37

	Exp -> Exp . '.' Exp                                (rule 7)
	Exp -> Exp '.' Exp .                                (rule 7)

	'.'            reduce using rule 7
	zero           reduce using rule 7
	suc            reduce using rule 7
	')'            reduce using rule 7
	main           reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 7


State 38

	Exp -> match Exp zero "->" . Exp suc var "->" Exp    (rule 8)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 39

State 39

	Exp -> Exp . '.' Exp                                (rule 7)
	Exp -> match Exp zero "->" Exp . suc var "->" Exp    (rule 8)

	'.'            shift, and enter state 29
	suc            shift, and enter state 40


State 40

	Exp -> match Exp zero "->" Exp suc . var "->" Exp    (rule 8)

	var            shift, and enter state 41


State 41

	Exp -> match Exp zero "->" Exp suc var . "->" Exp    (rule 8)

	"->"           shift, and enter state 42


State 42

	Exp -> match Exp zero "->" Exp suc var "->" . Exp    (rule 8)

	match          shift, and enter state 22
	suc            shift, and enter state 23
	'\\'           shift, and enter state 24
	int            shift, and enter state 25
	'('            shift, and enter state 26
	var            shift, and enter state 27

	Exp            goto state 43

State 43

	Exp -> Exp . '.' Exp                                (rule 7)
	Exp -> match Exp zero "->" Exp suc var "->" Exp .    (rule 8)

	'.'            shift, and enter state 29
	zero           reduce using rule 8
	suc            reduce using rule 8
	')'            reduce using rule 8
	main           reduce using rule 8
	var            reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 14
Number of non-terminals: 5
Number of states: 44
